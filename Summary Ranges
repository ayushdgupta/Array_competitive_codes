Question -> You are given a sorted unique integer array nums.

A range [a,b] is the set of all integers from a to b (inclusive).

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.

Each range [a,b] in the list should be output as:

"a->b" if a != b
"a" if a == b

Solution ->  straigt forward solution traverse the array right from the begining and find the brakpoint, if found then add it. but remember one point that last element will never be inclusive i.e. ya to last element
             se bhi sequence aage jayega no breakpoint on last ya fir last element se just phle break hoga sequene bcz yha sequence kb break hota hai jb uske aage vala element pluse one se jyada ho, lekin last vale
             element ke liye plus one to koi hoga hi nhi.

class Solution {
    public List<String> summaryRanges(int[] nums) {
        List<String> missingRanges = new ArrayList<>();
        int startRange = 0, size = nums.length, lastRange = 0;
        for(int i = 1; i < size; i++){
            if((nums[i] - 1 != nums[i-1])){
                if(i-1 != startRange){
                    missingRanges.add(String.format("%d->%d", nums[startRange], nums[i - 1]));
                } else{
                    missingRanges.add(Integer.toString(nums[startRange]));
                }
                startRange = i;
            }
        }
        if(startRange == size - 1){
            missingRanges.add(Integer.toString(nums[startRange]));
        } else if(startRange < size - 1){
            missingRanges.add(String.format("%d->%d", nums[startRange], nums[size - 1]));
        }
        return missingRanges;
    }
}
