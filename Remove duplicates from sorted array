Given an integer array nums sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in nums.

Consider the number of unique elements of nums to be k, to get accepted, you need to do the following things:

Change the array nums such that the first k elements of nums contain the unique elements in the order they were present in nums initially. The remaining elements of nums are not important as well as the size of nums.
Return k.

solution: 1. take one variable 'i' which will be standing just before the value that we need to swap or replace when we will found an unique element
2. take another variable 'j' which will traverse throught the array to find out the unique elements
3. this technique is similar or somewhat equal to the partition approach of quick sort.

code:

class Solution {
    public int removeDuplicates(int[] nums) {
        int i = 0;
        for(int j = i+1; j < nums.length; j++){
            if(nums[i] != nums[j]){
                if(j-i != 1){
                    i = i + 1;
                    nums[i] = nums[j];
                } else{
                    i = i + 1;
                }
            }
        }
        return i+1;
    }
}
