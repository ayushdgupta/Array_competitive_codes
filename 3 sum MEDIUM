Question --> Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.

Solution --> So here first we need to sort the array then start from0 to n-2. First fix one element and now the sum of other two should be -firstElement or firstElement + other two element should be 0. So after 
             Fixing first element, now the problem is Two sum problem.
             Time complexity is O(n2).

Solution 1 -> 

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int size = nums.length;
        List<List<Integer>> result = new ArrayList<>();
        for(int i = 0; i < size - 2; i++){
            if(i > 0 && nums[i] == nums[i-1]){
                continue;
            }
            List<List<Integer>> triplet = findCombo(nums[i] * -1, i+1, size-1, nums);
            if(!triplet.isEmpty()) {
                result.addAll(triplet);
            }
        }
        return result;
    }

    public List<List<Integer>> findCombo(int reqSum, int startIndex, int endIndex, int[] nums){
        List<List<Integer>> triplet = new ArrayList<>();
        for(int i = startIndex; i < endIndex; i++){
            int sum = nums[i] + nums[endIndex];
            if(sum > reqSum){
                endIndex--;
                i--;
            } else if(sum == reqSum){
                if(nums[i] == nums[i-1] && endIndex != nums.length - 1 && nums[endIndex] == nums[endIndex + 1]){
                    endIndex--;
                    continue;
                }
                triplet.add(List.of(reqSum * -1, nums[i], nums[endIndex]));
                endIndex--;
            }
        }
        return triplet;
    }
}


Solution 2--> Using set

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        int size = nums.length;
        List<List<Integer>> result = new ArrayList<>();
     
   for(int i = 0; i < size - 2; i++){
            if(i == 0 || nums[i] != nums[i-1]){
                List<List<Integer>> triplet = findCombo(nums[i] * -1, i+1, size-1, nums, size);
                if(!triplet.isEmpty()) {
                    result.addAll(triplet);
                }    
            }
        }
        return result;
    }

    public List<List<Integer>> findCombo(int reqSum, int startIndex, int endIndex, int[] nums, int size){
        Set<List<Integer>> triplet = new HashSet<>();
        while(startIndex < endIndex){
            int sum = nums[startIndex] + nums[endIndex];
            if(sum == reqSum){
                triplet.add(List.of(reqSum * -1, nums[startIndex], nums[endIndex]));
                startIndex++;
                endIndex--;
            } else if(sum < reqSum){
                startIndex++;
            } else{
                endIndex--;
            }
        }
        return triplet.stream().toList();
    }    
}
