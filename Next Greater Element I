The next greater element of some element x in an array is the first greater element that is to the right of x in the same array.

You are given two distinct 0-indexed integer arrays nums1 and nums2, where nums1 is a subset of nums2.

For each 0 <= i < nums1.length, find the index j such that nums1[i] == nums2[j] and determine the next greater element of nums2[j] in nums2. If there is no next greater element, then the answer for this query is -1.

Return an array ans of length nums1.length such that ans[i] is the next greater element as described above.

Example 1:

Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation: The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = [1,3,4,2]. The next greater element is 3.
- 2 is underlined in nums2 = [1,3,4,2]. There is no next greater element, so the answer is -1.

Solution --> First take a stack and a map, then traverse the nums2 first completely and try to find out the next greater element for all of them like whenever you see an element push it to the stack but before
             pushing it to the stack check if an smaller element present in the stack then current element willbe the next greater element for that no. so pop() that smaller no from stack and store it as a key and
             current element as a value (next greater) in the mapand do this until stack is empty or you find a greater no. than the current one.

class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
        int len1 = nums1.length, len2 = nums2.length;
        int[] ans = new int[len1];
        Stack<Integer> stack = new Stack<>();
        Map<Integer, Integer> map = new HashMap<>();
        for(int num : nums2){
            while(!stack.empty() && stack.peek() < num){
                map.put(stack.pop(), num);
            }
            stack.push(num);
        }
        int i = 0;
        for(int num : nums1){
            ans[i] = map.getOrDefault(num, -1);
            i++;
        }
        return ans;
    }
}
