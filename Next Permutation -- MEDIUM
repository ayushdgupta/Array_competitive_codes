Question - A permutation of an array of integers is an arrangement of its members into a sequence or linear order.

For example, for arr = [1,2,3], the following are all the permutations of arr: [1,2,3], [1,3,2], [2, 1, 3], [2, 3, 1], [3,1,2], [3,2,1].
The next permutation of an array of integers is the next lexicographically greater permutation of its integer. More formally, if all the permutations of the array are sorted in one container according to their lexicographical order, then the next permutation of that array is the permutation that follows it in the sorted container. If such arrangement is not possible, the array must be rearranged as the lowest possible order (i.e., sorted in ascending order).

For example, the next permutation of arr = [1,2,3] is [1,3,2].
Similarly, the next permutation of arr = [2,3,1] is [3,1,2].
While the next permutation of arr = [3,2,1] is [1,2,3] because [3,2,1] does not have a lexicographical larger rearrangement.
Given an array of integers nums, find the next permutation of nums.

The replacement must be in place and use only constant extra memory.

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]

Solution - 

Intution - 1. Start from the right side of the no. and traverse to the left and find out at which index your incresing no. streak is breaking.
2. At which index your streak is breaking that no. is your pivot point now i.e. if you will replace that no. with just greater no. (next greater no.) present in the right of it and reverse
the right array of that no then that no. will be the next greater no. in your permutation

class Solution {
    public void nextPermutation(int[] nums) {
        int length = nums.length;
        if(length != 1){
            int index = nonIncreasingIndex(nums, length-1);
            if(index == -1){
                nums = reverseTheArray(nums, 0, length-1);
            } else {
                nums = replaceTheIndexWithNextGreaterElement(nums, index, length-1);
                nums = reverseTheArray(nums, index+1, length-1);
            }
        }
    }

    private int[] reverseTheArray(int[] nums, int start, int end){
        while(start < end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
        return nums;
    }

    private int[] replaceTheIndexWithNextGreaterElement(int[] nums, int index, 
    int length){
        while(length > index){
            if(nums[index] < nums[length]){
                int temp = nums[index];
                nums[index] = nums[length];
                nums[length] = temp;
                break;
            } else{
                length--;
            }
        }

        return nums;
    }

    private int nonIncreasingIndex(int[] nums, int length){
        while(length - 1 > -1){
            if(nums[length] > nums[length - 1]){
                return length - 1;
            } else {
                length--;
            }
        }
        return length-1;
    }
}
