Question -- We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly 1.

Given an integer array nums, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

Example 1:

Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].

Solution --> Here just try to see one pattern that if there exist any harmonious sequence then it'll contain only no. 'n' and 'n+1' so in our example 1 if you see it contains only 2 & 3 and answer 5 is the 
             combination f 5 = Total(2) + Total(3) in the input array so we need to find out the frequence here not the sequence.

code -->

class Solution {
    public int findLHS(int[] nums) {
        // to store frequency
        Map<Integer, Integer> map = new HashMap<>();
        for(int num : nums){
            int count = map.getOrDefault(num, 0);
            map.put(num, count + 1);
        }

        int sequence = 0;
        Set<Integer> keys = map.keySet();
        for(int key : keys){
            int count = map.getOrDefault(key + 1, 0);
            if(count != 0){
                int sum = count + map.get(key);
                if(sum > sequence){
                    sequence = sum;
                }
            }
        }
        return sequence;
    }
}
