Question - Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

 

Example 1:

Input: nums = [3,2,3]
Output: [3]
Example 2:

Input: nums = [1]
Output: [1]
Example 3:

Input: nums = [1,2]
Output: [1,2]

Solution - Standard Boyre-moore's counting algorithm

class Solution {
    public List<Integer> majorityElement(int[] nums) {
        int element1 = -1, element2 = -1, count1 = 0, count2 = 0;
        // from here we will get the predictions that might be ele1, ele2 can be the
        // no. occured more than n/3 times
        for(int number : nums){
            if(number == element1){
                count1++;
            } else if(number == element2){
                count2++;
            } else if(count1 == 0){
                count1++;
                element1 = number;
            } else if(count2 == 0){
                count2++;
                element2 = number;
            } else {
                count1--;
                count2--;
            }
        }
        
        // now we need to confirm by traversing the array again
        // older variables count 1 and count 2 is not needed those can be
        // reused here
        int cnt1=0, cnt2=0;
        for(int num : nums){
            if(num == element1){
                cnt1++;
            } else if(num == element2){
                cnt2++;
            }
        }

        List<Integer> resultList = new ArrayList<>();
        if(cnt1 > nums.length / 3){
            resultList.add(element1);
        }

        if(cnt2 > nums.length / 3){
            resultList.add(element2);
        }

        return resultList;
    }
}
