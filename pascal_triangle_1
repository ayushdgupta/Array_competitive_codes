Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:
https://leetcode.com/problems/pascals-triangle/description/

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30

Solution: 

M1-> every entry in the pascal trianglr represents the binomial coefficient i.e. NcR (Combination N!/((R!) * (N-R)!)) so we can calculate using that approach.
1. First calculate the factorial of numbers till numRows and save them in a array (DP).
2. then use the formula NcR.

code: 
class Solution {
    public List<List<Integer>> generate(int numRows) {
        List<List<Integer>> result = new ArrayList<>();
        List<Integer> defaultList = new ArrayList<>();
        defaultList.add(1);
        result.add(defaultList);
        if(numRows == 1){
            return result;
        }
        long[] factorialArray = new long[numRows];
        factorialArray = calculateFactorialArray(factorialArray, numRows);
        int i = 2;
        while(i <= numRows){
            int j = 0;
            int half = (int) Math.ceil((double)i/2);
            int[] calcArray = new int[i];
            while(j < half){
                if(j == 0){
                    calcArray[j] = 1;
                    calcArray[i - j - 1] = 1;
                } else if(j == 1){
                    calcArray[j] = i - 1;
                    calcArray[i - j - 1] = i - 1;
                } else{
                    int value = calculateNCR(i-1, j, factorialArray);
                    calcArray[j] = value;
                    calcArray[i - j - 1] = value;
                }
                j++;
            }
            List<Integer> calcList = Arrays.stream(calcArray).boxed().toList();
            result.add(calcList);
            i++;
        }
        return result;
    }

    public long[] calculateFactorialArray(long[] factorialArray, int numRows){
        if(numRows == 1){
            factorialArray[numRows - 1] = 1;
            return factorialArray;
        } else{
            long factorial = numRows * calculateFactorialArray(factorialArray, numRows - 1)[numRows - 2];
            factorialArray[numRows - 1] = factorial;
            return factorialArray;
        }
    }

    public int calculateNCR(int numRows, int j, long[] factorialArray){
        int data = (int) (factorialArray[numRows - 1] / (factorialArray[j-1] * factorialArray[numRows - j-1]));
        return data;
    }
}

But the problem in this approach is factorial in java using long can be calculate till 17 or 18 or maybe till 19 but  after that this approach would n't work.

M2-> so we need to go with some brute force only but in some smarter way.
public class Solution {
public List<List<Integer>> generate(int numRows)
{
	List<List<Integer>> allrows = new ArrayList<List<Integer>>();
	ArrayList<Integer> row = new ArrayList<Integer>();
	for(int i=0;i<numRows;i++)
	{
		row.add(0, 1);
		for(int j=1;j<row.size()-1;j++)
			row.set(j, row.get(j)+row.get(j+1));
		allrows.add(new ArrayList<Integer>(row));
	}
	return allrows;
}
}

but in this approach if we see there is a one operation on line 91 -> row.add(0, 1); this is very costlier operation bcz it causes in shifting of all other elements present in the list so we should avoid this op.

M3-> 
public class Solution {
public List<List<Integer>> generate(int numRows)
{
	List<List<Integer>> result = new ArrayList<>();
    for(int i = 0; i < numRows; i++){
        List<Integer> rows = new ArrayList<>();
        rows.add(1);
        for(int j = 1; j <= i - 1; j++){
            rows.add(result.get(i - 1).get(j) + result.get(i - 1).get(j-1));
        }
        if(i>=1){
            rows.add(1);
        }
        result.add(rows);
    }
    return result;
}
}

but in this approach if you see we are referring the older calculated list which causes usage of space but what if we have been asked to provide only ith row value w/o using any extra space then we need to go
with M2 solution.
