Given an array arr, count the number of distinct triplets (a, b, c) such that:

a + b = c

Each triplet is counted only once, regardless of the order of a and b.

Even if the same number appears multiple times in the array, a valid triplet should be counted only once per unique combination.

Solution - simple fix c and take two pointers and check the sum and move two pointers accordingly. n*n + n*Log(n)

class Solution {
    int countTriplet(int arr[]) {
        // code here
        Arrays.sort(arr);
        int len = arr.length;
        
        int count = 0;
        for(int k = len - 1; k > 1; k--){
            int target = arr[k];
            int i = 0, j = k-1;
            while(i < j){
                if(arr[i] + arr[j] == target){
                    count++;
                    i++;
                    j--;
                } else if(arr[i] + arr[j] < target){
                    i++;
                } else{
                    j--;
                }
            }
        }
        return count;
    }
}
