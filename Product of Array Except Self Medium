Question -- Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation. and don't use any auxiliary space (i.e. any extra space except result array)

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Solution - 

for any nums[i] = prefix_product_till(0 to i-1) * suffix_product_from(i+1, size)

class Solution {
    public int[] productExceptSelf(int[] nums) {
        int size = nums.length;
        int result[] = new int[size];
        // calc prefix
        for(int i = 0; i < size; i++){
            if(i == 0){
                result[i] = 1;
            } else{
                result[i] = result[i-1] * nums[i-1];
            }
        }

        // now we have prefix so start from end
        int suffixMulti = 1;
        for(int i = size-1; i >= 0; i--){
            result[i] = result[i] * suffixMulti;
            suffixMulti = suffixMulti * nums[i];
        }

        return result;
    }
}
